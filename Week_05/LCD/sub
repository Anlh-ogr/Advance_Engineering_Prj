#!/usr/bin/env python3
import rclpy
from rclpy.node import Node
from std_msgs.msg import String
import smbus
import time

class LCD:
    # LCD Address
    ADDRESS = 0x27  # I2C address của PCF8574TA

    # commands
    LCD_CLEARDISPLAY = 0x01
    LCD_RETURNHOME = 0x02
    LCD_ENTRYMODESET = 0x04
    LCD_DISPLAYCONTROL = 0x08
    LCD_CURSORSHIFT = 0x10
    LCD_FUNCTIONSET = 0x20
    LCD_SETCGRAMADDR = 0x40
    LCD_SETDDRAMADDR = 0x80

    # flags for display entry mode
    LCD_ENTRYRIGHT = 0x00
    LCD_ENTRYLEFT = 0x02
    LCD_ENTRYSHIFTINCREMENT = 0x01
    LCD_ENTRYSHIFTDECREMENT = 0x00

    # flags for display on/off control
    LCD_DISPLAYON = 0x04
    LCD_DISPLAYOFF = 0x00
    LCD_CURSORON = 0x02
    LCD_CURSOROFF = 0x00
    LCD_BLINKON = 0x01
    LCD_BLINKOFF = 0x00

    # flags for display/cursor shift
    LCD_DISPLAYMOVE = 0x08
    LCD_CURSORMOVE = 0x00
    LCD_MOVERIGHT = 0x04
    LCD_MOVELEFT = 0x00

    # flags for function set
    LCD_8BITMODE = 0x10
    LCD_4BITMODE = 0x00
    LCD_2LINE = 0x08
    LCD_1LINE = 0x00
    LCD_5x10DOTS = 0x04
    LCD_5x8DOTS = 0x00

    # flags for backlight control
    LCD_BACKLIGHT = 0x08
    LCD_NOBACKLIGHT = 0x00

    En = 0b00000100  # Enable bit
    Rw = 0b00000010  # Read/Write bit
    Rs = 0b00000001  # Register select bit

    def __init__(self):
        self.bus = smbus.SMBus(1)  # Rev 2 Pi uses 1
        self.lcd_backlight = self.LCD_BACKLIGHT
        
        # Initializing
        self.lcd_write(0x03)
        self.lcd_write(0x03)
        self.lcd_write(0x03)
        self.lcd_write(0x02)

        self.lcd_write(self.LCD_FUNCTIONSET | self.LCD_2LINE | self.LCD_5x8DOTS | self.LCD_4BITMODE)
        self.lcd_write(self.LCD_DISPLAYCONTROL | self.LCD_DISPLAYON)
        self.lcd_write(self.LCD_CLEARDISPLAY)
        self.lcd_write(self.LCD_ENTRYMODESET | self.LCD_ENTRYLEFT)
        time.sleep(0.2)

    # Clocks EN to latch command
    def lcd_strobe(self, data):
        self.bus.write_byte(self.ADDRESS, data | self.En | self.lcd_backlight)
        time.sleep(.0005)
        self.bus.write_byte(self.ADDRESS, ((data & ~self.En) | self.lcd_backlight))
        time.sleep(.0001)

    def lcd_write_four_bits(self, data):
        self.bus.write_byte(self.ADDRESS, data | self.lcd_backlight)
        self.lcd_strobe(data)

    # Write a command to LCD
    def lcd_write(self, cmd, mode=0):
        self.lcd_write_four_bits(mode | (cmd & 0xF0))
        self.lcd_write_four_bits(mode | ((cmd << 4) & 0xF0))

    # Write a character to LCD
    def lcd_write_char(self, charvalue, mode=1):
        self.lcd_write_four_bits(mode | (charvalue & 0xF0))
        self.lcd_write_four_bits(mode | ((charvalue << 4) & 0xF0))

    # Put string to display at the specified position
    def lcd_display_string(self, string, line):
        if line == 1:
            self.lcd_write(0x80)
        if line == 2:
            self.lcd_write(0xC0)
        if line == 3:
            self.lcd_write(0x94)
        if line == 4:
            self.lcd_write(0xD4)

        for char in string:
            self.lcd_write_char(ord(char))

    # Clear display
    def lcd_clear(self):
        self.lcd_write(self.LCD_CLEARDISPLAY)
        self.lcd_write(self.LCD_RETURNHOME)

    # Backlight control
    def backlight(self, state):
        if state:
            self.lcd_backlight = self.LCD_BACKLIGHT
        else:
            self.lcd_backlight = self.LCD_NOBACKLIGHT
        self.bus.write_byte(self.ADDRESS, self.lcd_backlight)


class LCDSubscriber(Node):
    def __init__(self):
        super().__init__('lcd_subscriber')
        self.subscription = self.create_subscription(
            String,
            'lcd_data',
            self.listener_callback,
            10)
        self.get_logger().info('LCD Subscriber Node started')
        
        # Khởi tạo LCD
        try:
            self.lcd = LCD()
            self.lcd.lcd_clear()
            self.get_logger().info('LCD initialized successfully')
        except Exception as e:
            self.get_logger().error(f'Error initializing LCD: {str(e)}')
            raise e

    def listener_callback(self, msg):
        self.get_logger().info(f'Received: "{msg.data}"')
        try:
            # Xóa màn hình LCD
            self.lcd.lcd_clear()
            
            # Tách dữ liệu thành các dòng
            lines = msg.data.split('|')
            
            # Hiển thị từng dòng lên LCD
            for i, line in enumerate(lines, start=1):
                if i <= 4:  # LCD 20x4 có 4 dòng
                    self.lcd.lcd_display_string(line, i)
                    self.get_logger().info(f'Displayed on line {i}: "{line}"')
        except Exception as e:
            self.get_logger().error(f'Error displaying on LCD: {str(e)}')


def main(args=None):
    rclpy.init(args=args)
    lcd_subscriber = LCDSubscriber()
    
    try:
        rclpy.spin(lcd_subscriber)
    except KeyboardInterrupt:
        pass
    finally:
        # Xóa LCD khi kết thúc
        lcd_subscriber.lcd.lcd_clear()
        lcd_subscriber.destroy_node()
        rclpy.shutdown()


if __name__ == '__main__':
    main()